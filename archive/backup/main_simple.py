"""
Simplified working version with correct Qt constants
"""

import sys
import sqlite3
import time
from datetime import datetime
from typing import List, Dict, Optional
from pathlib import Path

from PyQt5.QtCore import Qt, QSize
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QStackedWidget, QVBoxLayout,
    QLabel, QTableWidget, QTableWidgetItem, QDialog, QMenuBar, QMenu,
    QAction, QStatusBar, QMessageBox, QHeaderView, QFileDialog,
    QAbstractItemView, QHBoxLayout, QPushButton
)

# Import our modules
from config import config
from style_manager import style_manager
from forms import ProductFormDialog, PartnerFormDialog, SettingsDialog


def format_date(dt_str: str) -> str:
    """Format datetime string for display"""
    try:
        dt = datetime.fromisoformat(dt_str.replace('Z', '+00:00'))
        return dt.strftime('%Y-%m-%d %H:%M')
    except:
        return dt_str


class Repository:
    """Data access layer"""
    
    def __init__(self, conn: sqlite3.Connection):
        self.conn = conn
    
    def list_invoices(self) -> List[Dict]:
        """Get all invoices ordered by date (newest first)"""
        return list(self.conn.execute("""
            SELECT i.id, i.number, i.created, i.direction, p.name as partner
            FROM invoice i 
            LEFT JOIN partner p ON i.partner_id = p.id 
            ORDER BY i.created DESC
        """).fetchall())
    
    def list_products(self) -> List[Dict]:
        return list(self.conn.execute("SELECT * FROM product ORDER BY name").fetchall())
    
    def list_partners(self) -> List[Dict]:
        return list(self.conn.execute("SELECT * FROM partner ORDER BY name").fetchall())
    
    def create_invoice(self, number: str, direction: str, partner_id: int) -> int:
        cursor = self.conn.execute(
            "INSERT INTO invoice (number, direction, partner_id, created) VALUES (?, ?, ?, ?)",
            (number, direction, partner_id, datetime.now().isoformat())
        )
        return cursor.lastrowid


class MainWindow(QMainWindow):
    """Simplified main window"""
    
    def __init__(self):
        super().__init__()
        self.conn = None
        self.repo = None
        self.setup_database()
        self.setup_ui()
        self.setup_menus()
        self.load_styles()
    
    def setup_database(self):
        """Initialize database"""
        try:
            db_path = config.get("database.path", "invoice_qt5.db")
            self.conn = sqlite3.connect(db_path)
            self.conn.row_factory = sqlite3.Row
            self.repo = Repository(self.conn)
        except Exception as e:
            QMessageBox.critical(self, "Database Error", f"Failed to open database: {str(e)}")
            sys.exit(1)
    
    def setup_ui(self):
        """Setup UI"""
        self.setWindowTitle("üìÑ Sz√°ml√°z√≥ Rendszer v2.0")
        self.setMinimumSize(1000, 700)
        
        # Main widget
        widget = QWidget()
        self.setCentralWidget(widget)
        layout = QVBoxLayout(widget)
        
        # Header
        header = QLabel("üìÑ Sz√°ml√°k List√°ja")
        header.setStyleSheet("font-size: 24px; font-weight: bold; margin: 20px;")
        layout.addWidget(header)
        
        # Table
        self.table = QTableWidget(0, 4)
        self.table.setHorizontalHeaderLabels(["üìÖ D√°tum", "üìã Sz√°mlasz√°m", "üë§ Partner", "üìä Ir√°ny"])
        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.table.setAlternatingRowColors(True)
        self.table.setSelectionBehavior(QAbstractItemView.SelectRows)
        layout.addWidget(self.table)
        
        # Status
        self.status = QStatusBar()
        self.setStatusBar(self.status)
        self.status.showMessage("K√©szen")
        
        self.refresh_list()
    
    def setup_menus(self):
        """Setup menus"""
        menubar = self.menuBar()
        
        # File Menu
        file_menu = menubar.addMenu("üìÅ &F√°jl")
        
        refresh_action = QAction("üîÑ &Friss√≠t√©s", self)
        refresh_action.setShortcut("F5")
        refresh_action.triggered.connect(self.refresh_list)
        file_menu.addAction(refresh_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction("üö™ &Kil√©p√©s", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # Products Menu
        products_menu = menubar.addMenu("üì¶ &Term√©kek")
        
        add_product_action = QAction("‚ûï &√öj term√©k", self)
        add_product_action.triggered.connect(self.add_product)
        products_menu.addAction(add_product_action)
        
        list_products_action = QAction("üìã &Term√©kek list√°ja", self)
        list_products_action.triggered.connect(self.list_products)
        products_menu.addAction(list_products_action)
        
        # Partners Menu
        partners_menu = menubar.addMenu("üë• &Partnerek")
        
        add_partner_action = QAction("‚ûï &√öj partner", self)
        add_partner_action.triggered.connect(self.add_partner)
        partners_menu.addAction(add_partner_action)
        
        list_partners_action = QAction("üìã &Partnerek list√°ja", self)
        list_partners_action.triggered.connect(self.list_partners)
        partners_menu.addAction(list_partners_action)
        
        # Settings Menu
        settings_menu = menubar.addMenu("‚öôÔ∏è &Be√°ll√≠t√°sok")
        
        config_action = QAction("üîß &Konfigur√°ci√≥", self)
        config_action.triggered.connect(self.open_settings)
        settings_menu.addAction(config_action)
        
        # Help Menu
        help_menu = menubar.addMenu("‚ùì &S√∫g√≥")
        
        about_action = QAction("‚ÑπÔ∏è &N√©vjegy", self)
        about_action.triggered.connect(self.about)
        help_menu.addAction(about_action)
    
    def load_styles(self):
        """Load CSS styles"""
        try:
            style_manager.apply_styles(self)
            self.status.showMessage("St√≠lusok bet√∂ltve")
        except Exception as e:
            self.status.showMessage(f"St√≠lus hiba: {str(e)}")
    
    def refresh_list(self):
        """Refresh invoice list"""
        try:
            invoices = self.repo.list_invoices()
            self.table.setRowCount(0)
            
            for inv in invoices:
                row = self.table.rowCount()
                self.table.insertRow(row)
                
                items = [
                    format_date(inv['created']),
                    inv['number'],
                    inv['partner'] or 'Nincs partner',
                    'ELAD√ÅS' if inv['direction'] == 'sale' else 'V√âTEL'
                ]
                
                for col, text in enumerate(items):
                    item = QTableWidgetItem(text)
                    item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)
                    self.table.setItem(row, col, item)
            
            self.status.showMessage(f"{len(invoices)} sz√°mla bet√∂ltve")
        except Exception as e:
            QMessageBox.warning(self, "Hiba", f"Lista friss√≠t√©se sikertelen: {str(e)}")
    
    def add_product(self):
        """Add new product"""
        try:
            dialog = ProductFormDialog(self.repo, parent=self)
            if dialog.exec_() == QDialog.Accepted:
                self.status.showMessage("Term√©k hozz√°adva")
        except Exception as e:
            QMessageBox.warning(self, "Hiba", f"Term√©k hozz√°ad√°sa sikertelen: {str(e)}")
    
    def list_products(self):
        """Show products"""
        try:
            products = self.repo.list_products()
            msg = "Term√©kek:\\n\\n"
            for p in products:
                msg += f"‚Ä¢ {p['sku']} - {p['name']} - {p['unit']/100:.2f} Ft\\n"
            QMessageBox.information(self, "Term√©kek", msg if products else "Nincsenek term√©kek")
        except Exception as e:
            QMessageBox.warning(self, "Hiba", f"Term√©kek list√°z√°sa sikertelen: {str(e)}")
    
    def add_partner(self):
        """Add new partner"""
        try:
            dialog = PartnerFormDialog(self.repo, parent=self)
            if dialog.exec_() == QDialog.Accepted:
                self.status.showMessage("Partner hozz√°adva")
        except Exception as e:
            QMessageBox.warning(self, "Hiba", f"Partner hozz√°ad√°sa sikertelen: {str(e)}")
    
    def list_partners(self):
        """Show partners"""
        try:
            partners = self.repo.list_partners()
            msg = "Partnerek:\\n\\n"
            for p in partners:
                msg += f"‚Ä¢ {p['name']} - {p['address'] or 'Nincs c√≠m'}\\n"
            QMessageBox.information(self, "Partnerek", msg if partners else "Nincsenek partnerek")
        except Exception as e:
            QMessageBox.warning(self, "Hiba", f"Partnerek list√°z√°sa sikertelen: {str(e)}")
    
    def open_settings(self):
        """Open settings"""
        try:
            dialog = SettingsDialog(parent=self)
            if dialog.exec_() == QDialog.Accepted:
                self.status.showMessage("Be√°ll√≠t√°sok mentve")
                self.load_styles()
        except Exception as e:
            QMessageBox.warning(self, "Hiba", f"Be√°ll√≠t√°sok megnyit√°sa sikertelen: {str(e)}")
    
    def about(self):
        """Show about"""
        QMessageBox.about(self, "N√©vjegy", 
                         "üìÑ Sz√°ml√°z√≥ Rendszer v2.0\\n\\n"
                         "Professzion√°lis sz√°ml√°z√≥ alkalmaz√°s\\n"
                         "PyQt5 alap√∫ grafikus fel√ºlettel\\n\\n"
                         "¬© 2024")
    
    def keyPressEvent(self, e):
        """Handle key events"""
        if e.key() == Qt.Key_F5:
            self.refresh_list()
        elif e.key() == Qt.Key_F1:
            self.about()
        else:
            super().keyPressEvent(e)
    
    def closeEvent(self, e):
        """Clean up on close"""
        if self.conn:
            self.conn.close()
        e.accept()


def main():
    """Main entry point"""
    app = QApplication(sys.argv)
    app.setApplicationName("Invoice Manager v2.0")
    app.setApplicationVersion("2.0")
    
    window = MainWindow()
    window.show()
    
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
